<template>
  <van-popup :overlay-style="{background:'#fff',opacity: 0}" v-if="visible" v-model="visible" :style="{  height: '100%',width: '100%' }" position="right">
    <div class="outer">
      <div class="custom-header">
        <span class="iconfont" @click="onClickLeft">&#xe630;</span>
        <span class="title">选择收款人</span>
        <span></span>
      </div>
      <search :placeholder="`请输入账户名`" @search="searchPayeeList" @clear="searchPayeeList"></search>
      <div class="scroll-box">
        <van-index-bar :z-index="10" :index-list="indexAnchor" highlight-color="#262626">
          <div v-for="(item,index) in indexListData" :key="index">
            <van-index-anchor :index="item.anchor">{{item.anchor}}</van-index-anchor>
            <ul class="paddingLR40 index-group" style="background:#fff;">
              <li class="payee-col" v-for="(child,index) in item.children" :key="index" :clickable="true" @click="handleSelect(child)">
                <div class="payee-icon">
                  <!-- <img :src="tools.bankIconImg(child.bankNbr)" alt /> -->
                  <img :src="require(`@/assets/bankIcons/default.png`)" v-bankIcon="child.bankNbr" alt />
                </div>
                <div class="payee-right">
                  <div>{{child.payeeName}}</div>
                  <div class="info">
                    {{child.payeeAcctNbr | CardProtect}}
                    <span v-if="child.bankName">&nbsp;|&nbsp;</span>{{child.bankName}}
                  </div>
                </div>
              </li>
            </ul>
            <!-- <div class="paddingLR40" style="background:#fff;">
              <van-cell v-for="(child,index) in item.children" :key="index" :clickable="true" @click="handleSelect(child)">
                <template slot="title">
                  <div slot="title" class="payee-col">
                    <div class="payee-icon">
                      <img :src="require(`@/assets/bankIcons/default.png`)" v-bankIcon="child.bankNbr" alt />
                    </div>
                    <div class="payee-right">
                      <div>{{child.payeeName}}</div>
                      <div class="info">
                        {{child.payeeAcctNbr | CardProtect}}
                        <span v-if="child.bankName">&nbsp;|&nbsp;</span>{{child.bankName}}
                      </div>
                    </div>
                  </div>
                </template>
              </van-cell>
            </div> -->

          </div>
        </van-index-bar>
      </div>
      </van-index-bar>
    </div>
  </van-popup>
</template>
<script>
import { IndexBar, IndexAnchor, Popup, Toast } from "vant";
import Scroller from "@/components/Scroller.vue";
import Search from "@/components/Search";
import { mapGetters, mapActions, mapState } from "vuex";
var Pinyin = require("@/tools/pinyin.js").Pinyin;

export default {
  components: {
    Search,
    [IndexBar.name]: IndexBar,
    [IndexAnchor.name]: IndexAnchor,
    [Toast.name]: Toast,
    [Popup.name]: Popup,
    Scroller
  },
  props: {
    show: {
      type: Boolean,
      default: false
    },
  },
  data() {
    return {
      visible: false,
      //右侧锚点列表
      indexAnchor: [],
      //带锚点的数据列表
      indexListData: [],
      selectItem: {},
      data: [],

    };
  },
  created() {
    this.initData();
    // this.getData();
  },
  computed: {
    ...mapState('transferAccounts', ['linkManLists']),
  },
  methods: {
    ...mapActions('transferAccounts', ['getLinkManLists']),
    async initData() {
      if (this.linkManLists.length > 0) {
        this.data = [...this.linkManLists];
        this.getIndexList();
      }
      let res = await this.getLinkManLists();
      this.data = [...this.linkManLists];
      this.getIndexList();
    },
    searchPayeeList(data) {
      let params = {
        //branchId: '2336',
        ChnlId: '62',
        PayeeName: data
      }
      this.request('QryPayeeList', params).then((res) => {
        this.data = res.AcctPayeeList;
        this.getIndexList();
        console.log('获取收款人', res);
      }).catch((error) => {
        console.log(error)
      })

    },

    getIndexList() {
      let data = [...this.data];
      //第一轮生成带有26个字母的锚点列表
      let arrList = [];
      for (let i = 0; i < 26; i++) {
        let item = {
          anchor: String.fromCharCode((65 + i)),
          children: []
        }
        arrList.push(item);
      }
      let sitem = {
        anchor: '#',
        children: []
      }
      // console.log('arrList', arrList);
      //将对应字母数据插入到indexList里
      data.map(item => {
        let name = item.payeeName || "无名";
        item.payeeName = item.payeeName || '无名'
        let PinYin = Pinyin.parse(name)[0];
        let firstStr = PinYin.target.substring(0, 1).toUpperCase();
        for (let child of arrList) {
          //可以加入其他判断 比如 我的账户（使用id作对比）
          //字母索引插入
          if (child.anchor === firstStr) {
            child.children.push(item)
          }
        }
        // 判断非字母 则加入至#;
        let reg = /^[A-Za-z]+$/;
        if (!reg.test(firstStr)) {
          sitem.children.push(item);
        }
      })
      arrList.push(sitem);
      // 第三轮遍历arrList过滤掉无内容素的item,避免空占位
      let indexList = [], indexAnchor = [];
      for (let item of arrList) {
        if (item.children.length > 0) {
          indexList.push(item);
          indexAnchor.push(item.anchor)
        }
      }
      this.indexListData = indexList;
      this.indexAnchor = indexAnchor;
      // console.log("账户列表",indexList)
    },
    setTitle() {
      //   window.NativeCall.SetTitle('选择开户网点')
      //   window.NativeCall.RegisterHandler('VXBack',()=>{
      //     this.$emit('update:show', false)
      //   })
    },
    onClickLeft() {
      this.visible = false;
      this.$emit("close");
    },
    handleSelect(item) {
      this.selectItem = item;
      this.visible = false;
      this.$emit("select", this.selectItem);
    }
  },
  watch: {
    //监听父组件变化，并赋值
    show: {
      handler(val) {
        this.visible = this.show;
        if (val) {
          if (this.indexListData.length === 0) {
            this.initData();
          }

        }
      }
    },
    visible: {
      handler(val) {
        this.$emit('update:show', val)
      }
    }
  }
};
</script>

<style lang="scss" scoped>
/deep/ .outer {
  .van-nav-bar {
    z-index: 5 !important;
    &.van-hairline--bottom::after {
      border-bottom-width: 0;
    }
  }
  .van-index-bar__sidebar {
    margin-right: px2vw(16);
  }
  .van-nav-bar .van-icon {
    color: #333;
  }
  .van-index-bar__index--active {
    color: #333 !important;
  }
  .van-index-anchor--sticky {
    top: -1px;
  }
  .van-index-bar__index {
    color: #0085ff;
    line-height: px2vw(36);
  }

  .index-group {
    .payee-col:last-child {
      border: none;
    }
  }
  .scroll-box {
    overflow-y: scroll;
    height: 100%;
    background: #f5f6f8;
    .van-cell {
      margin: 0;
      height: px2vw(110);
      padding: 0;
      display: flex;
      align-items: center;
      // border-bottom: $border-bottom;
    }
    .van-index-anchor {
      background: #f5f6f8;
      height: px2vw(61);
      padding: 0 px2vw(40);
      font-size: px2vw(24);
      color: $color-text;
      font-weight: 500;
    }

    .payee-col {
      display: flex;
      align-items: center;
      height: px2vw(110);
      border-bottom: $border-bottom;
      .payee-icon {
        width: px2vw(64);
        max-height: px2vw(64);
        margin-right: px2vw(20);
        img {
          width: 100%;
        }
      }
      .payee-right {
        color: #262626;
        font-weight: 400;
        font-size: px2vw(30);
        font-family: PingFangSC;
        letter-spacing: px2vw(1);
        div {
          line-height: 1.4;
        }
        .info {
          color: #7d7d7d;
          font-size: px2vw(24);
        }
        //徽标
        .dot {
          display: inline-block;
          margin-left: px2vw(8);
          text-align: center;
          line-height: px2vw(30);
          border-radius: 50%;
          width: px2vw(30);
          height: px2vw(30);
          font-size: px2vw(20);
          font-family: $font-size;
          font-weight: 400;
          color: #fff;
          background: linear-gradient(
            204deg,
            rgb(61, 37, 36) 0%,
            rgba(248, 123, 62, 1) 100%
          );
        }
      }
    }
  }
}
</style>