<template>
  <div class="outer">
    <Myheader :title="$route.meta.title" :params="params"></Myheader>
    <div class="content">
      <p class="title">{{productInfo.ProductName}}</p>
      <div class="info">
        <div class="cell">
          <p class="label">持有金额</p>
          <div class="text">{{productInfo.FinanProPortAMT|Money}}</div>
        </div>
        <div class="cell">
          <p class="label">七日年化</p>
          <div class="text">{{productInfo.Yield|parseFloatTwo}}</div>
        </div>
        <!-- <div class="cell">
          <p class="label">交易时间</p>
          <div class="text">{{'20190703'|timeFormat1}}</div>
        </div>-->
        <div class="cell">
          <p class="label">放款账户</p>
          <div class="text">{{productInfo.PayeeBankName}}({{productInfo.BankAcct|CardNoFour}})</div>
        </div>
      </div>
      <div class="money">
        <p class="tit">赎回金额</p>
        <div class="input">
          <div class="amount">
            <md-amount
              v-if="!isOver"
              :value="form.upperMoney"
              is-capital
              :style="{'visibility': form.money?'visible':'hidden'}"
            ></md-amount>
            <span v-else class="isOver">输入金额大于持有金额</span>
            <div class="mdInput">
              <span>￥</span>
              <md-input-item
                type="money"
                v-model="form.money"
                @change="onInputChange"
                placeholder="支持部分赎回"
                maxlength="9"
              ></md-input-item>
            </div>
          </div>
          <p class="all" @click="selectAll">全部赎回</p>
        </div>
      </div>
      <div class="btn">
        <van-button :disabled="hasInput" @click="confirm">确认</van-button>
      </div>
      <div class="tip">
        <p>温馨提示</p>
        <p>1.赎回资金将在赎回成功后实时返回客户购买账户；</p>
        <p>2.非交易时间赎回，将在下一个工作日赎回受理，净值以当日为准，交易时间为国家法定工作日08:00-18:00。</p>
      </div>
    </div>
  </div>
</template>

<script>
import Header from "@/components/Header/Header.vue";
import { Button } from "vant";
import { Amount, InputItem } from "mand-mobile";
export default {
  data() {
    return {
      params: {
        leftShow: false
      },
      form: {
        money: null,
        upperMoney: null
      },
      hasInput: true,
      productInfo: {},
      isOver: false,
      isDel:false
    };
  },
  watch: {
    "form.money": {
      handler(val,oldVal) {
        // console.log(val, oldVal);
        if (val && parseFloat(this.form.money) <= parseFloat(this.productInfo.FinanProPortAMT)) {
          this.hasInput = false;
          // console.log(1)
        } else {
          this.hasInput = true;
          // console.log(2)
        }
        if (parseFloat(this.form.money) > parseFloat(this.productInfo.FinanProPortAMT)){
          this.isOver = true;
        } else {
          this.isOver = false;
        }
        let value = val.toString()
        let old = oldVal?oldVal.toString():''
        if(value.length<old.length){
          this.isDel=true
        }else{
          this.isDel=false
        }
        if (value.indexOf(".") != -1) {
          let arr = value.split(".");
          let length = arr[1].length
          if (length>2) {
            // console.log(1)
            this.form.money = parseFloat(arr[0]+'.'+arr[1].slice(0,2))
            // this.form.money=11
            // console.log(this.form.money)
          }else if(length==1){
            this.form.money = parseFloat(arr[0]+'.'+arr[1].slice(0,length))
          }else if(length ==0 && this.isDel){
            this.form.money = parseFloat(arr[0])
          }
        }
      }
    }
  },
  filters: {
    timeFormat1(value) {
      let arr = [];
      arr.push(value.slice(0, 4));
      arr.push(value.slice(4, 6));
      arr.push(value.slice(6));
      return arr.join("-");
    }
  },
  components: {
    Myheader: Header,
    [Button.name]: Button,
    [Amount.name]: Amount,
    [InputItem.name]: InputItem
  },
  created() {
    // this.data = this.$route.params.data;
  },
  beforeRouteEnter(to, from, next) {
    next(vm => {
      if (from.name == "pocketDetail") {
        vm.productInfo = vm.$route.params;
        vm.$store.state.manageMoney.productInfo = vm.productInfo;
      } else {
        vm.productInfo = vm.$store.state.manageMoney.productInfo;
      }
    });
  },
  methods: {
    onInputChange(name, value) {
      this.form.upperMoney = parseFloat(value);
    },
    confirm() {
      let params = {
        BranchId: "PHNE",
        ChnlId: "62",
        BankAcc: this.productInfo.BankAcct,
        PrdCode: this.productInfo.ProductNo,
        Vol: this.form.money,
        LargRedFlag: "1",
        AccType: "0",
        Account: this.productInfo.BankAcct,
        TrsAcNo: this.productInfo.BankAcct
      };
      this.request("FinaRealTimeRedemptionConfirm", { ...params })
        .then(res1 => {
          window.NativeCall.SecureKeyboard(psd => {
            this.request("FinaRealTimeRedemption", {
              ...params,
              Passwd: psd,
              _tokenName: res1._tokenName
            })
              .then(res => {
                let type = {
                  type: "2"
                };
                this.$store.state.manageMoney.totalValueFlag = false;
                this.$router.push({
                  name: "pocketResult",
                  params: { ...res, ...this.productInfo, ...type, ...params }
                });
              })
              .catch(err => {
                // this.$toast(err._RejMessage);
                let type = {
                  type: "3"
                };
                this.$router.push({
                  name: "pocketResult",
                  params: { ...err, ...this.productInfo, ...type, ...params }
                });
              });
          });
        })
        .catch(err => {
          this.$toast(err._RejMessage);
        });
    },
    selectAll() {
      this.form.money = this.productInfo.FinanProPortAMT;
    }
  }
};
</script>

<style lang="scss" scoped>
.outer {
  background: #f5f6f8;
  height: 100vh;
  display: flex;
  flex-direction: column;
  .content {
    flex: 1;
    overflow: auto;
    -webkit-overflow-scrolling: touch;
  }
  .content::-webkit-scrollbar {
    display: none;
  }
}
.content {
  .title {
    line-height: px2vw(110);
    padding: 0 px2vw(40);
    font-size: px2vw(32);
    font-family: PingFangSC-Medium, PingFang SC;
    font-weight: 500;
    color: rgba(38, 38, 38, 1);
    background: #fff;
  }
  .info {
    padding: px2vw(32) px2vw(40) px2vw(37);
    box-sizing: border-box;
    margin-top: px2vw(20);
    background: #fff;
  }
  .money {
    margin-top: px2vw(20);
    background: #fff;
    .tit {
      height: px2vw(80);
      line-height: px2vw(80);
      padding: 0 px2vw(40);
      font-size: px2vw(30);
      font-family: PingFangSC-Regular, PingFang SC;
      font-weight: 400;
      color: rgba(38, 38, 38, 1);
    }
    .input {
      padding: 0 px2vw(40);
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: space-between;
      .all {
        min-width: px2vw(120);
        text-align: right;
        font-size: px2vw(26);
        font-family: PingFangSC-Regular, PingFang SC;
        font-weight: 400;
        color: rgba(62, 143, 255, 1);
      }
      .isOver {
        font-size: px2vw(24);
        font-family: PingFangSC;
        font-weight: 400;
        color: rgba(255, 181, 43, 1);
        margin-top: px2vw(18);
      }
      .mdInput {
        display: flex;
        span {
          font-size: px2vw(24);
          font-family: PingFangSC;
          font-weight: 400;
          color: #262626;
          line-height: px2vw(56);
        }
      }
    }
    /deep/ .md-amount {
      font-size: px2vw(24);
      font-family: PingFangSC;
      font-weight: 400;
      color: rgba(255, 181, 43, 1);
      margin-top: px2vw(18);
    }
    /deep/ .md-input-item {
      height: px2vw(56);
      line-height: px2vw(56);
      display: flex;
      flex-direction: row;
      align-items: center;
      padding-bottom: px2vw(29);
    }
    /deep/ .md-field-item-content:before {
      content: none;
    }
  }
  .cell {
    height: px2vw(40);
    display: flex;
    flex-direction: row;
    align-items: center;
    .label {
      // width: px2vw(112);
      font-size: px2vw(28);
      font-family: PingFangSC-Light, PingFang SC;
      font-weight: 300;
      color: rgba(125, 125, 125, 1);
    }
    .text {
      font-size: px2vw(28);
      font-family: PingFangSC-Regular, PingFang SC;
      font-weight: 400;
      color: rgba(0, 0, 0, 1);
      margin-left: px2vw(87);
    }
  }

  .btn {
    padding: 0 px2vw(40);
    margin-top: px2vw(100);
    .van-button {
      width: 100%;
      height: px2vw(90);
      font-size: px2vw(34);
      font-weight: 400;
      color: rgba(255, 255, 255, 1);
      background: linear-gradient(#6babff, #6c8af9);
      border-radius: px2vw(45);
    }
  }
  .tip {
    padding: 0 px2vw(40);
    margin-top: px2vw(40);
    p {
      font-size: px2vw(22);
      font-family: PingFangSC-Regular, PingFang SC;
      font-weight: 400;
      color: rgba(125, 125, 125, 1);
      line-height: px2vw(40);
    }
  }
}
</style>