<template>
  <van-popup v-model="show" position="bottom" :style="{ width: '100vw',height:'100vh' }">
    <div class="header">
      <span class="iconfont iconicon_guanbi-" @click="goBack"></span>
      <p class="title">{{title}}</p>
    </div>
    <div class="content">
      <van-index-bar :index-list="indexAnchor" @select="selectBar">
        <div class="items" v-for="(items,index) in indexListData" :key="index">
          <van-index-anchor :index="items.anchor" v-show="'false'"></van-index-anchor>
          <van-cell
            v-for="(item,i) in items.children"
            :key="i"
            @click="choose(item)"
            :title="item.bankName"
            :class="{'active':bankId==item.bankId}"
          >
            <div slot="right-icon" class="iconfont iconcheck-" v-if="bankId==item.bankId"></div>
          </van-cell>
        </div>
      </van-index-bar>
    </div>
  </van-popup>
</template>

<script>
import { Popup, Field, IndexBar, IndexAnchor, Cell } from "vant";
import { mapActions, mapState } from "vuex";
export default {
  components: {
    [Popup.name]: Popup,
    [Field.name]: Field,
    [IndexBar.name]: IndexBar,
    [IndexAnchor.name]: IndexAnchor,
    [Cell.name]: Cell
  },
  props: {
    selectBankFlag: {
      default: false,
      required: true
    }
  },
  data() {
    return {
      title: "请选择曾购买理财银行",
      show: false,
      value: null,
      bankId: null,
      indexListData: null,
      indexAnchor: null
    };
  },
  created() {
    this.initData();
  },
  watch: {
    selectBankFlag: {
      handler(val) {
        this.show = val;
      }
    }
  },
  computed: {
    ...mapState("common", ["bankList"])
  },
  methods: {
    ...mapActions("common", ["getBankList"]),
    goBack() {
      this.$parent.selectBankFlag = false;
    },
    async initData() {
      let a = await this.getBankList();
      let b = await this.getIndexList();
      console.log(this.indexListData, this.indexAnchor);
    },
    getIndexList() {
      const Pinyin = require("@/tools/pinyin.js").Pinyin;
      let data = [...this.bankList];
      // console.log(data,"数组");
      //第一轮生成带有26个字母的锚点列表
      let arrList = [];
      for (let i = 0; i < 26; i++) {
        let item = {
          anchor: String.fromCharCode(65 + i),
          children: []
        };
        arrList.push(item);
      }
      console.log("arrList", arrList);
      //将对应字母数据插入到indexList里
      let remenList = [];
      data.map(item => {
        let bankName = item.bankName;
        let PinYin = Pinyin.parse(bankName)[0];
        let firstStr = PinYin.target.substring(0, 1).toUpperCase();
        for (let child of arrList) {
          //可以加入其他判断 比如 我的账户（使用id作对比）
          //字母索引插入
          if (child.anchor === firstStr) {
            child.children.push(item);
          }
        }
        if (item.orderId == 1) {
          //orderId 1:热门银行标记 2：没有银行logo标记
          remenList.push(item);
        }
      });
      // 第三轮遍历arrList过滤掉无内容素的item,避免空占位
      let indexList = [],
        indexAnchor = [];
      for (let item of arrList) {
        if (item.children.length > 0) {
          indexList.push(item);
          indexAnchor.push(item.anchor);
        }
      }

      console.log(indexAnchor,indexList)
      this.indexListData = indexList;
      this.indexAnchor = indexAnchor;
      console.log("热门银行", this.indexListData);
      //添加热门银行
      // this.indexAnchor.unshift("热");
      // let remen = {
      //   anchor: "热",
      //   children: remenList
      // };
      // this.indexListData.unshift(remen);
      // console.log("银行卡列表",indexList)
    },
    choose(val) {
      // console.log(val);
      this.bankId = val.bankId;
      this.$parent.selectBankFlag = false;
      this.$parent.form.CardInst = val;
      console.log(this.$parent.form);
      this.$emit("pass");
    },
    selectBar(val) {
      // let indexBar = document.getElementsByClassName("content")[1];
      // let height = indexBar.scrollTop + 20;
      // console.log(height);
      // indexBar.scrollTo(height, 0);
    }
  }
};
</script>

<style lang="scss" scoped>
.van-popup {
  display: flex;
  flex-direction: column;
}
.header {
  font-size: px2vw(34);
  font-weight: 500;
  color: rgba(38, 38, 38, 1);
  height: px2vw(100);
  line-height: px2vw(100);
  padding: 0 px2vw(40);
  display: flex;
  flex-direction: row;
  align-items: center;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  background: #fff;
  z-index: 1000;
  box-sizing: border-box;
  p {
    // flex: 1;
    width: px2vw(340);
    font-size: px2vw(30);
    font-weight: 400;
    text-align: center;
    position: absolute;
    left: 0;
    right: 0;
    margin: 0 auto;
  }
  .iconfont {
    font-size: px2vw(22);
    font-weight: 300;
    color: #666666;
    line-height: px2vw(100);
  }
}
.content {
  // flex: 1;
  overflow: auto;
  -webkit-overflow-scrolling: touch;
  // padding: 0 px2vw(40);
  margin-top: px2vw(100);
  .item {
    height: px2vw(110);
    padding: 0 px2vw(40);
    font-size: px2vw(30);
    font-weight: 400;
    color: rgba(38, 38, 38, 1);
    letter-spacing: px2vw(1);
    .iconfont {
      font-size: px2vw(30);
      color: #3e8fff;
      font-weight: 400;
    }
  }
}
.content::-webkit-scrollbar {
  display: none;
}
/deep/ .van-index-anchor {
  padding: 0;
  height: px2vw(110);
  font-size: px2vw(30);
  font-weight: 400;
  color: rgba(38, 38, 38, 1);
  letter-spacing: px2vw(1);
}
/deep/ .van-index-bar__sidebar {
  position: absolute;
  right: px2vw(14);
  color: #107aee;
}
/deep/ .van-cell:not(:last-child)::after {
  position: absolute;
  content: " ";
  left: 0;
  bottom: 0;
  height: px2vw(1);
  width: 100%;
  background: #eff0f1;
}
/deep/ .van-cell {
  padding: 0 px2vw(40);
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  .iconfont {
    color: #107aee;
  }
}
/deep/ .van-index-bar__sidebar {
  z-index: 10000 !important;
}
.active {
  background: #f4f5f7;
}
/deep/ .van-index-anchor {
  // display: none
  padding: 0 px2vw(40);
  line-height: px2vw(110)
}

/deep/ .van-index-bar__index {
    padding: px2vw(6) px2vw(15) 0 px2vw(30);
}
</style>