<template>
  <div class="outer phone-transfer">
    <Myheader :title="$route.meta.title" :params="headerParams" :backRouter="headerBackRouter"></Myheader>
    <Scroller style="background:#F5F6F8;">
      <div class="top group">
        <div class="card-item">
          <!-- <img :src="tools.bankIconImg(debitCard.bankNbr || '')"  alt /> -->
          <img :src="require(`@/assets/bankIcons/CTS.png`)" alt />
          <p class="name">{{debitCard.acctName}}</p>
          <p class="bank">{{debitCard.bankName||"焦作中旅银行"}}({{debitCard.vouId | CardNoFour}})</p>
        </div>
        <div class="center"></div>
        <div class="card-item">
          <img :src="tools.bankIconImg(payee.bankNbr || '')" alt />
          <p class="name">{{payee.payeeName}}</p>
          <p class="bank">{{payee.bankName}}({{payee.payeeAcctNbr | CardNoFour}})</p>
        </div>
      </div>
      <section class="field-section">
        <debit-card :label="`付款账户`" @select="selectPayeeCard"></debit-card>
      </section>

      <section class="field-section">
        <header class='field-header'>
          <span class="title">转账金额</span>
        </header>
        <transAmt v-model="transAmt" :balance="debitCard.balance" placeholder="请输入" @change="onInputChange"></transAmt>
        <div class="accounting-date" v-if="payee.bankName && transAmt > 0">
          到账时间
          <img class="tip" src="@/assets/help.png" alt="" @click="alertShow = true">
          <div class="time">{{order.text || '预计实时到账'}}</div>
          <!-- <div class="btn">更换</div> -->
        </div>
        <div class="accounting-date" v-else>
          到账时间以收款银行为准
        </div>
      </section>
      <!-- 非本行卡 或者 金额超过100w 或者 没有超级网银时需选择 -->
      <section class="field-section open-info" v-if="netSelectShow">
        <div class="filed_cell picker open-net">
          <van-cell @click="openArea">
            <template slot="title">
              <span class="custom-title">收款方开户地</span>
            </template>
            <template>
              <div v-if="payee.openCity" style="color:#262626;">{{payee.openCity}}</div>
              <div class="placeholder" v-else>请选择城市</div>
            </template>
          </van-cell>
        </div>
        <div class="filed_cell picker">
          <van-cell @click="openBankNetWork">
            <template slot="title" class="label">
              <span class="custom-title">开户网点</span>
            </template>
            <template>
              <div v-if="payee.dotName" style="color:#262626;">{{payee.dotName}}</div>
              <div class="placeholder" v-else>请选择开户网点</div>
            </template>
          </van-cell>
        </div>
      </section>

      <section class="field-section">
        <div class="filed_cell">
          <div class="label">用途</div>
          <div class="filed">
            <m-input :maxlength="16" v-model="payee.transUsage" :value="payee.transUsage" placeholder="请输入（选填，最多可输入16字）"></m-input>
          </div>
        </div>
        <div class="filed_cell">
          <van-switch-cell v-model="notifyPayee" title="通知收款人" />
        </div>
        <div class="filed_cell notify_payee-filed" v-if="notifyPayee">
          <div class="label">收款人手机号</div>
          <div class="filed">
            <m-input type="phone" :maxlength="11" v-model="payee.phone" :value="payee.phone" placeholder="请输入手机号"></m-input>
            </di <img class="right-icon" src="@/assets/transferAccounts/icon_tongxunlu@2x.png" alt />
          </div>
        </div>
      </section>
      <div class="footer-box">
        <div class="btn-box">
          <van-button :disabled="disNext" class="marginLR40" @click="checkLimit" :loading="nextLoading">下一步</van-button>
        </div>
      </div>

      <div class="explain">
        <p>温馨提示</p>
        <p>1.为了您的资金安全，切勿轻信陌生人或以公检法、亲戚朋友之名通过网络聊天、直播、电话、短信等方式提供的代办大额信用卡、刷单、高额投资理财等非正规渠道的转账贷款，谨防诈骗。请当面核实或到合法正规金融机构办理转账业务。</p>
        <p>2.请妥善保管本人卡号、密码、短信验证码等中重要信息,切勿通过任何方式告诉任何人。</p>
      </div>
    </Scroller>
    <!-- 弹出组件 -->
    <!-- 开户网点 -->
    <BankNetWorkList :show.sync="bankNetWorkListShow" :params="area" :bankName="payee.bankName" :bankId="payee.bankId"  @select="selectBankNewWork"></BankNetWorkList>
    <!-- 省市选择 -->
    <area-picker :visible.sync="areaShow" :title="`请选择开户地址`" :params="area" @confirm="selectArea" @select="getAreaName"></area-picker>
    <!-- 手机验证码 -->
    <captcha :visible.sync="captchaShow" @confirm="transferCheck"></Captcha>
    <!-- 选择安全工具弹窗 -->
    <security :visible.sync="securityShow" :form='payee' @confirm="handleConfirm"></security>

    <myDialog :show.sync="alertShow" :isClose="false" :showCancel="false" :confirmButtonText="`我知道了`">
      <p slot="content" class="dialog-content">
        根据人民银行防范电信诈骗有关要求，我行为您提供“实时”、“普通”、“次日”三种转账方式。 到账时间：行内转账一般为实时到账，7*24小时受理。跨行转账5万元(含）以下的，请选择“实时”到账，7*24小时受理。跨行转账5万元(含）以上的，请选择“普通”到账，工作日交易时间(前一日20:30-当日17:15)，非工作日(周六日及节假日)可办理最高100万元跨行转账。
      </p>
    </myDialog>

    <myDialog :show.sync="confirm100w" :isClose="false" :confirmButtonText="`继续转账`" :cancelButtonText="`调整金额`" @con="pass100w = true,confirm100w = false,checkLimit()">
      <p slot="content" class="dialog-content" style="text-align:left;">
        单笔转账超过{{this.superNetLimitUpper}}<br />
        到账时间为工作日00:00-17:15
        <br />
        <br />
        您可以选择：<br />
        1）继续转账，顺延至下个工作日到账 <br />
        2）调整金额，拆分成多笔，每笔小于{{this.superNetLimitUpper}}可实时转账<br />
      </p>
    </myDialog>

    <myDialog :show.sync="confirmSingle" title="超出单笔限额" :isClose="true" :confirmButtonText="`修改限额`" :cancelButtonText="`调整金额`" @con="goLimitMoney">
      <p slot="content" class="dialog-content" style="text-align:left;">
        单笔转账限额为￥{{this.limitRule.singleLimit | Money}}<br />
        <br />
        <br />
        1) 调低转账金额；<br />
        2) 修改转账限额。 <br />
      </p>
    </myDialog>

    <myDialog :show.sync="confirmDayAmt" title="超出每日限额" :isClose="true" :confirmButtonText="`修改限额`" :cancelButtonText="`调整金额`" @con="goLimitMoney">
      <p slot="content" class="dialog-content" style="text-align:left;">
        你今天还可以继续转账￥{{this.limitRule.dayBalance | Money}}<br />
        <br />
        <br />
        1) 调低转账金额；<br />
        2) 修改转账限额。 <br />
      </p>
    </myDialog>

    <myDialog :show.sync="confirmCount" title="转账笔数不足" :isClose="true" :confirmButtonText="`修改限额`" :cancelButtonText="`调整金额`" @con="goLimitMoney">
      <p slot="content" class="dialog-content">
        每日转账限额{{this.limitRule.dayTotalCount}}笔，您可以修改每日转帐笔数限制后再进行操作。
      </p>
    </myDialog>

    <van-overlay :z-index="100" :show="loading">
      <div class="wrapper">
        <img class="loading-img" src="~@/assets/loading-blue.gif" />
        <p class="loading-info">处理中,等待结果反馈…</p>
      </div>
    </van-overlay>
  </div>
</template>
<script>
import Header from "@/components/Header/Header.vue";
import Scroller from "@/components/Scroller.vue";
import mInput from "@/components/Input/bankCardNum.vue";
import DebitCard from "./components/DebitCard"
import { mapGetters, mapActions, mapState } from "vuex";
import { SwitchCell, Picker, Toast, Overlay } from "vant";
import { Amount, InputItem } from "mand-mobile";
import PopupRound from "@/components/PopupRound";
import AreaPicker from '@/components/Picker/Area'
import myDialog from '@/components/Dialog/Dialog'
import Security from '@/components/Popup/Security'
import Captcha from '@/components/Popup/Captcha'
import BankList from "@/components/Picker/bankList";
import BankNetWorkList from "./components/bankNetWorkList";
import TransAmt from "@/components/Input/transAmt.vue"
export default {
  components: {
    Myheader: Header,
    Scroller,
    mInput,
    DebitCard,
    [SwitchCell.name]: SwitchCell,
    [Amount.name]: Amount,
    [InputItem.name]: InputItem,
    [Picker.name]: Picker,
    [Toast.name]: Toast,
    [Overlay.name]: Overlay,
    PopupRound,
    AreaPicker,
    myDialog,
    BankList,
    Captcha,
    Security,
    BankNetWorkList,
    TransAmt
  },
  data() {
    return {
      headerParams: {
        leftShow: false,
        rightShow: true
      },
      headerBackRouter: {
        // name:'confirm',
      },
      // 收款人对象
      payee: {
        name: '',
        bankName: '',
        bankCard: '',
        bankId: '',
        openCity: '',
        cityCode: '',
        provinceCode: '',
        phone: '',//通知的收款人手机号
        IBPSFlag: 0,//支持超网标记
      },
      // 转账金额
      transAmt: null,
      debitCard: {
        bankName: '',
        acctName: "",
        vouId: '',
        balance: ''
      },
      // 通知收款人开关
      notifyPayee: false,
      bankList: [],
      order: {
        text: '预计实时到账',
        id: '1'
      },
      orderList: [{
        text: '预计次日9：00到账',
        id: '1'
      }, {
        text: '预计次日10：00到账',
        id: '2'
      }, {
        text: '预计次日11：00到账',
        id: '3'
      },],
      areaShow: false,
      alertShow: false,
      bankNetWorkListShow: false,
      bankListShow: false,
      securityShow: false,
      captchaShow: false,
      ownBank: true,//是否为本行交易
      ownerCard: false,//是否为本人卡
      area: {
        provinceCode: '',
        cityCode: ''
      },
      loading: false,
      params: {},
      limitRule: {},
      confirm100w: false,
      confirmSingle: false,
      confirmDayAmt: false,
      confirmCount: false,
      isWorkDay: false,
      pass100w: false,
      nextLoading: false,
      ExtTransTypCd: '1102',//1102银行账户转账 1103手机号转账,
      isPhoneTransfer: this.$route.query.isPhoneTransfer || false,
      timer: null,
      transTimer: null,
      superNetLimit: 1000000,
      superNetLimitUpper: "100万",
    };
  },
  computed: {
    wrongShow() {
      let show = false;
      if (Number(this.transAmt) > Number(this.debitCard.balance)) {
        show = true;
      }
      return show
    },
    // 开户省市开户网点选择是否显示
    netSelectShow() {
      if (!this.ownBank) {
        if (this.transAmt <= this.superNetLimit && (this.payee.payeeAcctNbr && this.payee.bankId)) {
          if (this.payee.IBPSFlag == 1) {//别行卡小于等于100w且支持超网
            return false
          } else {
            return true
          }
        } else if (this.transAmt > this.superNetLimit && (this.payee.payeeAcctNbr)) {//别行卡超过100w
          return true
        }
      } else {//本行卡无需选择
        return false
      }
    },
    disNext() {
      let disabled = true;
      if (!this.transAmt || this.transAmt <= 0) {
        disabled = true;
      } else if (this.notifyPayee && !this.payee.phone) { //勾选是否通知收款人，手机号码必输
        disabled = true;
      } else if ((!this.ownBank && this.payee.IBPSFlag == 0) && (!this.payee.dotNbr || !this.payee.bankNbr || !this.payee.dotName)) {
        disabled = true;
      } else if (this.wrongShow) {
        disabled = true;
      } else if (!this.ownBank && this.payee.IBPSFlag == 1 && Number(this.transAmt) > this.superNetLimit && (!this.payee.bankNbr || !this.payee.dotNbr || !this.payee.dotName)) {
        disabled = true;
      } else {
        disabled = false;
      }
      return disabled
    }
  },
  created() {
    if (this.$route.params.payee) {
      this.payee = {...this.$route.params.payee};
      this.payee.phone = this.payee.payeePhoneNbr;
      this.payee.name = this.payee.payeeName;
      this.payee.bankCard = this.payee.payeeAcctNbr;
      this.qryBankBin(this.payee.payeeAcctNbr)
      // this.payee.bankId = this.payee.bankId || this.payee.payeeBankNbr.substring(0, 3)
      console.log(this.payee, "this.payee")

    }
    if (this.isPhoneTransfer) {
      this.$route.meta.title = '手机号转账'
      this.ExtTransTypCd = '1103';
    }
  },
  mounted() {
    this.area = {
        provinceCode: this.payee.payeeProvinceCd,
        cityCode: this.payee.payeeCityCd
    }

   },
  methods: {
    //查询卡bin
    async qryBankBin(card) {
      let params = {
        AcctNbr: card,
        //branchId: '2336',
        ChnlId: '62'
      }
      let res = await this.request('BankBinQuery', params)
      let { InnerCardFlag, OpenIbpsYn, BankId, PayeeBankName, ClearBankNo } = res;
      // 是否为本行卡或别行卡标记
      this.payee.InnerCardFlag = InnerCardFlag;
      if (InnerCardFlag == 0) {
        this.ownBank = false;
        this.payee.reconciliation = 0;
      } else if (InnerCardFlag == 1) {
        this.ownBank = true;
        this.payee.reconciliation = 1;
      }
      // 超网标志
      if (OpenIbpsYn === 'Y') {
        this.payee.IBPSFlag = 1;
      } else {
        this.payee.IBPSFlag = 0;
      }

      if (PayeeBankName) {//卡bin设置银行
        this.payee.bankName = PayeeBankName;
        this.payee.bankNbr = ClearBankNo;//设置清算行号
        this.payee.bankId = BankId;
      } else {
        this.payee.bankName = "";
        this.payee.bankNbr = "";//设置清算行号
        this.payee.bankId = "";
      }
      console.log("卡bin查询后的payee", this.payee)
    },
    //查询是否本人卡
    async qryIsPersonal() {
      let params = {
        PayeeAcctNbr: this.payee.payeeAcctNbr,
        //branchId: '2336',
        ChnlId: '62'
      }
      try{
        let res = await this.request('QryIsPersonalCard',params, true)
        let { flag } = res;
        if (flag === 'Y') {
          this.ownerCard = true;  //@unfinished
        } else {
          this.ownerCard = false;
        }
        return true
      }
      catch(err){
        console.log(err,"查询本人卡错误")
        return false
      }
      
    },
    //选择付款卡
    selectPayeeCard(item) {
      console.log('选择的付款卡', item)
      this.debitCard = { ...item };
      let bankId = this.debitCard.bankNbr.substring(0, 3);
      this.debitCard.bankId = bankId
    },
    // 转账金额变化
    onInputChange(name, value) {
      // 跨行判断金额超过100w时，或者小额不支持超网时 需判断是否为工作日
      if (this.ownBank) return
      if (this.timer) clearTimeout(this.timer)
      this.timer = setTimeout(() => {
        this.checkWorkDate(value);
      }, 400)
    },
    // 校验转账到账时间
    checkWorkDate() {//value=>转账金额
      if (this.ownBank) {
        //本行卡无需校验
        this.order.text = "预计实时到账";
      } else {
        let apiCheck = false;//满足调用服务器时间查询的条件

        if (this.transAmt > 0) {
          let params = {
            TransAmt: this.transAmt,
            //branchId: "2336",
            ChnlId: "62"
          }
          if (this.transAmt > this.superNetLimit) {
            apiCheck = true;
          } else {
            if (this.payee.IBPSFlag == 0) {
              apiCheck = true;
            }
          }

          if (apiCheck) {
              this.request('QryPaymentDate',
                params, true
              ).then((res) => {
                console.log('预计到账时间判断', res);
                let { PaymentDate, QryChannel } = res;
                let text = '';
                this.order.text = "预计" + PaymentDate;
                if (QryChannel == 'nextDay' || QryChannel == 'nextWorkDay') {
                  this.isWorkDay = true;
                } else {
                  this.isWorkDay = false;
                }
              }).catch((error) => {
                console.log(error)
              })
            
          } else {
            this.order.text = "预计实时到账";
          }

        }
      }
    },
    openArea() {
      this.areaShow = true;
    },
    // 监听省市组件选择动作
    selectArea(data) {
      // console.log(data, "设置城市")
      if (data.length > 1) {
        // 重置网点信息
        if (data[1].value != this.payee.payeeCityCd) {
          this.payee.dotNbr = "";
          this.payee.dotName = "";
        }
        this.payee.payeeProvinceCd = data[0].value;
        this.payee.payeeCityCd = data[1].value;
        this.payee.openCity = data[0].text + data[1].text;
        this.areaShow = false;
        // this.area = {
        //   provinceCode: this.payee.payeeProvinceCd,
        //   cityCode: this.payee.payeeCityCd
        // }
      }

    },
    // 获取收款人附带的省市信息  结合area变化
    getAreaName(data) {
      console.log("获取",data)
      this.payee.payeeProvinceCd = data[0].value;
      this.payee.payeeCityCd = data[1].value;
      // this.payee.openCity = data[0].text + data[1].text;
      if (this.payee.payeeCityCd) {
        let str = '';
        for (let item of data) {
          str += item.text
        }
        this.$set(this.payee, 'openCity', str)//直接赋值，不能展示，需使用$set
      }
    },
    //选择开户网点
    openBankNetWork() {
      // console.log(this.payee.cityCode, "开启判断")
      if (!this.payee.payeeCityCd) {
        Toast("请先选择省市")
      } else {
        this.bankNetWorkListShow = true;
      }
    },
    selectBankNewWork(data) {
      console.log('选择开户网点', data)
      this.payee.dotNbr = data.bankno;
      this.payee.dotName = data.bankname;
      this.payee = {...this.payee}//必须加才能触发下一步按钮disabled验证，不清楚原因，
      this.checkWorkDate();
    },
    //查询账户限额
    async checkLimit() {
      this.nextLoading = true;
      let qryPersonal = await this.qryIsPersonal();
      if(!qryPersonal){
        this.nextLoading = false;
        return 
      }
      // this.next();
      // return
      // @unfinished 需与远程增加跳转页面插件
      // 跨行转账>100w，非工作日提示
      if (!this.ownerCard) {
        if (this.transAmt > this.superNetLimit && this.isWorkDay == false && !this.pass100w) {
          this.confirm100w = true;
          this.nextLoading = false;
          return
        }
        let params = {
          AcNo: this.debitCard.vouId,
          AcSeq: this.debitCard.userAcctId,
          BranchId: '2336',
          ChnlId: '62',
        }

        try {
          let res = await this.request('LimitMtCoutQry', params, true);
          this.limitRule = res.PersLimitRule[0];
          // console.log(this.limitRule)
          let dayTotalLimit = this.limitRule.dayTotalLimit;
          let dayCountLimit = this.limitRule.dayTotalCount;
          let singleLimit = this.limitRule.singleLimit;
          this.limitRule.dayBalance = Number(dayTotalLimit) - Number(this.limitRule.dayUseAmt);
          console.log(this.transAmt, singleLimit, dayTotalLimit, dayCountLimit, "检测")
          // 超出单笔限额
          if (Number(this.transAmt) > Number(singleLimit)) {
            this.confirmSingle = true;
            this.nextLoading = false;
            return
          }
          // 超出每日日限额
          if (Number(this.transAmt) + Number(this.limitRule.dayUseAmt) > Number(dayTotalLimit)) {
            this.confirmDayAmt = true;
            this.nextLoading = false;
            return
          }
          // 超出日转账限制次数
          if (Number(dayCountLimit) - Number(this.limitRule.dayUseCount) < 1) {
            this.confirmCount = true;
            this.nextLoading = false;
            return
          }
          this.next();
        } catch (err) {
          // 前端获取限额数据失败转为后台校验
          this.nextLoading = false;
          return 
        }

      } else {
        this.next();
      }

    },
    //点击下一步，存储参数，调出确认转账工具
    next() {
      this.payee.transAmt = this.transAmt;
      this.params = {
        ChnlId: '62',
        PayerAcctNbr: this.debitCard.vouId,//付款人银行卡
        TrsAcNo: this.debitCard.vouId,
        PayeeAcctNbr: this.payee.payeeAcctNbr,//收款人银行卡
        TransAmt: this.transAmt,
        ExtTransTypCd: this.ExtTransTypCd,
        IsFGBiz: '2',
        PayerAcctName: this.debitCard.acctName,//付款人姓名
        PayeeAcctName: this.payee.payeeName,//收款人姓名
        PayeeBankName: this.payee.bankName,
        PayeeOpenAcctBankCode: this.payee.bankNbr,// 超网行号    transMode = 1 ,  大小额2
        PayeeBankNbr: this.payee.dotNbr,//接收清算行行号    bankno 开户行行号
        TransMode: this.payee.IBPSFlag == "1" ? '1' : '2',
        CheckAccPassw: '0',
        TransUsage: this.payee.transUsage,//转账用途/附言
        IBPSFlag: this.payee.IBPSFlag,
        Phone: this.notifyPayee ? this.payee.phone : ''
      };
      if (this.ownerCard) {
        this.ownerCardTransfer();
      } else {
        // 非本人卡转账打开确认工具
        this.securityShow = true;
        this.nextLoading = false;
      }
    },
    ownerCardTransfer() {
      if (this.payee.payeeAcctNbr == this.debitCard.vouId) {
        Toast("收付款卡不能是同一张银行卡")
        this.nextLoading = false;
        return
      }
      this.request('TransferConfirm', this.params, true).then(res => {
        this.params._tokenName = res._tokenName;
        this.nextLoading = false;
        this.securityShow = true;
      }).catch(err=>{
        this.nextLoading = false;
      });

    },
    // 确认窗点击下一步触发， 调用后台参数校验
    handleConfirm() {
      console.log("确认转账下一步")
      if (this.ownerCard) {
        this.bankTransfer();
        this.securityShow = false;
      } else {
        this.securityShow = false;
        this.captchaShow = true;
      }
    },
    // 验证手机验证码
    transferCheck(data) {
      console.log(data, "接受验证码组件参数")
      this.params.OTPPassword = data.code;
      this.params.SmsNbr = data.SmsNbr;
      this.captchaShow = false;
      if (this.transTimer) clearTimeout(this.transTimer)
      this.transTimer = setTimeout(() => {
        this.request('TransferConfirm',
          this.params
        ).then((res) => {
          console.log('后台校验转账参数', res);
          // 打开验证码
          this.params._tokenName = res._tokenName;
          this.passwordCheck();
        }).catch((error) => {
          console.log(error)
          // Toast("传入参数有误，请重试");+
        })
      }, 300)

    },
    // 输入完验证码后调用密码组件
    passwordCheck() {
      if (process.env.NODE_ENV == "development") {//随时删除
        this.params.Password1 = '111111';//本地测试无法调用密码组件 写死
        this.bankTransfer();
      } else {
        window.NativeCall.SecureKeyboard(param => {
          this.params.Password1 = param;
          // this.params.Password = '111111';
          this.bankTransfer();
        });
      }
    },
    //银行账户转账
    bankTransfer() {
      this.loading = true;
      this.request('Transfer',
        this.params,true
      ).then((res) => {
        console.log('执行转账结果', res);
        this.payee.PayeeBankNbr = res.PayeeBankNbr
        this.payee.PayeeOpenAcctBankCode = res.PayeeOpenAcctBankCode;
        this.payee.ArriveTime = res.ArriveTime;
        this.$router.replace({ name: 'result', query: { success: 1, isPhoneTransfer: this.isPhoneTransfer }, params: { payee: this.payee, res: res } })
      }).catch((error) => {
        console.log(error)
        if (error._RejCode == "999999" || error._RejCode == "TimeOut") {
          if (error._RejMessage.indexOf("密码输入不正确") > 0) {
            Toast(error._RejMessage)
            this.loading = false;
          } else if (error.jsonError && error.jsonError[0]._exceptionMessageCode == 'PWD7') {
            Toast(error._RejMessage)
            this.loading = false;
          } else {
            this.$router.replace({ name: 'result', query: { success: 0, isPhoneTransfer: this.isPhoneTransfer }, params: { payee: this.payee, res: error } })
          }
        } else {
          this.loading = false;
          Toast(error._RejMessage)
        }
      })

    },
    goLimitMoney() {
      let params = {
        ios: 'DLimitMoneyController',
        ClassName: "com.example.zlv_master.activity.mine.XianErActivity"
      }
      window.NativeCall.goToNativePage(params, res => {
        //跳转至原生页面
      });
    }
  },
  watch: {
  }
};
</script>
<style lang="scss" scoped>
/deep/ .van-hairline--top-bottom::after {
  border: none;
}
/deep/ .van-cell {
  padding: 0;
}
/deep/ .open-net .van-cell .van-cell__title{
  width: px2vw(180);
  .custom-title{
    width: px2vw(180);
  }
}
/deep/ .md-input-item.is-disabled .md-input-item-input {
  color: #262626;
  -webkit-text-fill-color: #262626;
}

.footer-box {
  margin-top: px2vw(101);
}
.explain {
  font-size: px2vw(22);
  font-family: PingFangSC;
  font-weight: 400;
  color: #7d7d7d;
  line-height: px2vw(30);
  text-align: justify;
  padding: px2vw(39) px2vw(40);
}
.dialog-content {
  color: $color-text;
  font-size: px2vw(26);
  line-height: px2vw(36);
  font-family: $font-family;
  margin-bottom: px2vw(50);
}

.top {
  background: #fff;
  height: px2vw(310);
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  .card-item {
    width: 40%;
    height: 100%;
    padding: 0 px2vw(20);
    display: flex;
    flex-direction: column;
    align-items: center;
    img {
      width: px2vw(86);
      height: px2vw(86);
      margin-bottom: px2vw(20);
      margin-top: px2vw(67);
    }
    .name {
      font-size: px2vw(30);
      font-weight: 400;
      color: #262626;
      line-height: px2vw(30);
      letter-spacing: px2vw(1);
      margin-bottom: px2vw(16);
    }
    .bank {
      font-size: px2vw(24);
      color: #7d7d7d;
      font-weight: 300;
      line-height: px2vw(24);
    }
  }
  .center {
    width: px2vw(78);
    height: px2vw(78);
    background: url("~@/assets/transferAccounts/icon_to.png");
    background-size: 100% 100%;
    border-radius: 50%;
    box-shadow: 0 px2vw(8) px2vw(39) rgba(146, 154, 196, 0.13);
  }
}
</style>
