<template>
  <div class="outer">
    <div class="header">
      <span class="iconfont" @click="goBack">&#xe630;</span>
      <span class="title">{{$route.meta.title}}</span>
      <span class="edit" @click="onSubmit">{{$route.meta.right}}</span>
    </div>
    <section class="field-section">
      <div class="filed_cell">
        <div class="label">姓名</div>
        <div class="filed">
          <m-input v-model="form.payeeName" :disabled="true" :value="form.payeeName" placeholder="请输入真实姓名">
          </m-input>
        </div>
      </div>
    </section>
    <section class="field-section">
      <div class="filed_cell">
        <div class="label">账户</div>
        <div class="filed">
          <m-input :maxlength="19" type="bankCard" :disabled="true" v-model="form.payeeAcctNbr" :value="form.payeeAcctNbr" @blur="bankNumBlur" placeholder="请输入账户">
          </m-input>
        </div>
      </div>

      <div class="filed_cell picker">
        <van-cell>
          <template slot="title" class="label">
            <span class="custom-title">开户银行</span>
          </template>
          <template>
            <div v-if="form.bankName" style="color:#858b9c;">{{form.bankName}}</div>
            <div v-else>请选择开户行</div>
          </template>
        </van-cell>
      </div>
      <div class="filed_cell picker">
        <van-cell @click="areaShow =  true" is-link>
          <template slot="title" class="label">
            <span class="custom-title">开户城市</span>
          </template>
          <template>
            <div v-if="form.openCity" style="color:#262626;">{{form.openCity}}</div>
            <div v-else>选填</div>
          </template>
        </van-cell>
      </div>
      <div class="filed_cell picker">
        <van-cell @click="openBankNetWork" is-link>
          <template slot="title" class="label">
            <span class="custom-title">开户网点</span>
          </template>
          <template>
            <div v-if="form.dotName" style="color:#262626;">{{form.dotName}}</div>
            <div v-else>选填</div>
          </template>
        </van-cell>
      </div>
    </section>
    <section class="field-section">
      <div class="filed_cell">
        <div class="label">手机号</div>
        <div class="filed">
          <m-input type="phone"  v-model="form.payeePhoneNbr" :value="form.payeePhoneNbr" placeholder="选填">
          </m-input>
        </div>
      </div>
    </section>
    <div class="del">
      <van-button type="default" @click="cancelConfirm=true" :close-on-click-overlay="false">删除联系人</van-button>
    </div>

    <bankList :show.sync="bankListShow" :zl="true" @select="selectBank"></bankList>
    <area-picker :visible.sync="areaShow" :title="`请选择开户地址`" @confirm="selectArea"></area-picker>
    <!-- 开户网点 -->
    <BankNetWorkList :show.sync="bankNetWorkListShow" :bankId="form.bankId" :cityCode="form.payeeCityCd" @select="selectBankNewWork"></BankNetWorkList>
 
    <MyDialog :show="cancelConfirm" :isClose="false" :confirmButtonText="`我再想想`" :cancelButtonText="`删除`" @cancel="handleDelete" @con="cancelConfirm = false">
      <p slot="content" class="dialog-content">
        删除后无法恢复，是否继续？
      </p>
    </MyDialog>
  </div>
</template>

<script>
import { Icon ,Toast } from "vant";
import BankList from "@/components/Picker/bankList";
import AreaPicker from '@/components/Picker/Area';
import BankNetWorkList from "../components/bankNetWorkList";
import mInput from "@/components/Input/bankCardNum.vue";
import { mapGetters, mapActions, mapState } from "vuex";
import Dialog from "@/components/Dialog/Dialog.vue";
export default {
  components: {
    [Icon.name]: Icon,
    [Toast.name]: Toast,
    mInput,
    BankList,
    AreaPicker,
    BankNetWorkList,
    MyDialog: Dialog
  },
  data() {
    return {
      form: this.$route.params.payee,
      bankListShow: false,
      areaShow: false,
      bankNetWorkListShow: false,
      bankNetWork: {},
      area: {
        provinceCode: '',
        cityCode: ''
      },
      bankSelected: false,
      cancelConfirm: false,
      tempData: '',
    }
  },
  created(){
    console.log(this.$route.params.payee,"dddd")
    this.tempData = {...this.$route.params.payee};
  },
  computed: {
    disabled() {
      let disabled = true;
      return disabled
    }
  },
  methods: {
    goBack() {
      this.$router.replace({name: "payeeDetail", params: { payee: this.tempData }  });
    },
    // 选择银行
    selectBank(data) {
      console.log(data, '选择银行');
      this.form.bankName = data.bank.bankName;
      this.form.bankId = data.bankId;
      this.bankSelected = true;
      if(data.ibpsBankList.length> 0){
        this.form.bankNbr = data.ibpsBankList[0].bankagent;
      }else{
        this.form.bankNbr = '';
      }
      // 重置网点选择
      this.bankNetWork = {};
      this.form.dotNbr = '';
      this.form.dotName = '';
      this.form.openCity = '';
      this.form.payeeProvinceCd = '';
      this.form.payeeCityCd = '';
      // 超网标志
      if (data.ibpsFlage === 'Y') {
        this.form.ibpsFlag = 1;
      } else {
        this.form.ibpsFlag = 0;
      }
      if(data.bank.bankName == '焦作中旅银行'){
        this.form.reconciliation = 1;
      }else{
        this.form.reconciliation = 0;
      }
    },
    // 选择省市
    selectArea(data) {
      let str = '';
      for (let item of data) {
        str += item.text
      }
      this.form.openCity = str;
      this.form.payeeProvinceCd = data[0].provinceCode;
      this.form.payeeCityCd = data[1].cityCode;
      this.bankNetWork = {};
      this.form.dotNbr = '';
      this.form.dotName = '';
      this.areaShow = false;
    },
    // 获取省市名称
    getAreaName(data) {
      // console.log(data, "城市变化")
      this.form.payeeProvinceCd = data[0].value;
      this.form.payeeCityCd = data[1].value;
      this.form.openCity = data[0].text + data[1].text;
    },
    openBankNetWork() {
      // console.log(this.payee.cityCode, "开启判断")
      if (!this.form.payeeCityCd) {
        Toast("请先选择省市")
      } else {
        this.bankNetWorkListShow = true;
      }
    },
    //选择开户网点
    selectBankNewWork(data) {
      // console.log('选择开户网点', data)
      this.bankNetWork = { ...data };
      this.form.dotNbr = this.bankNetWork.bankno;
      this.form.dotName = this.bankNetWork.bankname;
      //bankcatalog , bankname, nodecity ,bankno
    },
    bankNumBlur() {
      if (this.form.payeeAcctNbr && this.form.payeeAcctNbr.length >= 13) {
        this.qryBankBin(this.form.PayeeAcctNbr);
      }
    },
    //查询卡bin
    qryBankBin(card) {
      let params = {
        AcctNbr: card,
        //branchId: '2336',
        ChnlId: '62'
      }
      this.request('BankBinQuery',
        params, true
      ).then((res) => {
        console.log("查询kabin", res)
        let { InnerCardFlag, OpenIbpsYn, BankId, Banks, PayeeBankNbr } = res;
        let bankInfo = {};
        if (Banks.length == 1) {//匹配到唯一银行时
          bankInfo = Banks[0];
        } else {
          this.bankList = Banks;
        }
        // 是否为本行卡或别行卡标记
        if (InnerCardFlag == 0) {
          this.form.Reconciliation = 0;
        } else if (InnerCardFlag == 1) {
          this.form.Reconciliation = 1;
        }
        if (bankInfo) {//卡bin设置银行
          this.$set(this.form,'BankName',bankInfo.bankname)
          this.$set(this.form,'BankNbr',bankInfo.bankagent)//设置清算行号
          this.$set(this.form,'bankId',BankId)
          this.form.BankName = bankInfo.bankname;
          this.bankSelected = true;
        } 

      }).catch((error) => {
        console.log(error)
      })
    },
    onSubmit() {
      let params = {
        //branchId: '2336',
        ChnlId: '62',
        PayeeAcctNbr: this.form.payeeAcctNbr,
        PayeeName: this.form.payeeName,
        Reconciliation: this.form.reconciliation,
        BankNbr: this.form.bankNbr,//收款行行号
        BankName: this.form.bankName,
        PayeeProvinceCd: this.form.payeeProvinceCd,//收款行省码
        PayeeCityCd: this.form.payeeCityCd,//收款行省码
        PayeePhoneNbr: this.form.payeePhoneNbr,
        DotNbr: this.form.dotNbr,//网点号  行内和超网非必传
        DotName: this.form.dotName,//网点号  行内和超网非必传
        AssertTyp:1,
      }
      this.request('UpdatePayeeRoster',
        params
      ).then((res) => {
        let { data } = res;
        if (res.RespCode == '000000') {
          Toast("修改成功")
          this.$router.replace({name: "allPayee"});
        }

      }).catch((error) => {
        console.log(error)
      })
    },
    handleDelete() {
      let params = {
        PayeeAcctNbr: this.form.payeeAcctNbr,
        AssertTyp:2,
        //branchId: '2336',
        ChnlId: '62'
      }
      this.request('UpdatePayeeRoster',
        params
      ).then((res) => {
        let { data } = res;
        if (res.RespCode == '000000') {
          Toast("删除成功")
          this.cancelConfirm = false;
          this.$router.replace({name: "allPayee"});
        }

      }).catch((error) => {
        console.log(error)
        this.cancelConfirm = false;
      })
      // UpdatePayeeRoster
    }
  },
};
</script>
<style lang="scss" scoped>
@import "../../../../assets/IconFont/iconfont.css";
// @import "../../../../styles/transferAccounts/common.scss";
.outer {
  width: 100%;
  height: 100%;
  background-color: #f5f6f8;
  font-size: px2vw(30);
  font-family: PingFangSC;
  color: #262626;
  line-height: px2vw(30);
  .header {
    height: px2vw(88);
    background-color: #fff;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-content: center;
    align-items: center;
    padding: 0 px2vw(40);
    .iconfont{
      font-size:px2vw(32);
      color:#262626;
    }
    .title {
      font-size: px2vw(36);
      line-height: px2vw(36);
      font-weight:500;
      font-family: $font-family;
    }
    .edit{
      font-size:px2vw(30);
      font-weight:400;
      font-family: $font-family;
    }
  }
}
.group {
  margin-top: px2vw(20);
}
/deep/ .van-field__control {
  height: 100%;
}
/deep/ .van-cell {
  padding: 0;
}
/deep/ .van-field__label {
  display: flex;
  flex-direction: column;
  justify-content: center;
}
/deep/ .van-cell__value {
  display: flex;
  flex-direction: column;
  justify-content: center;
}
/deep/ .van-field__body {
  flex-direction: row;
  justify-content: space-between;
}
.line {
  position: relative;
}
.line::after {
  content: " ";
  width: px2vw(670);
  height: px2vw(1);
  position: absolute;
  top: -px2vw(0.5);
  left: px2vw(40);
  background-color: #eff0f1;
  z-index: 100;
}
/deep/ .van-hairline--top-bottom::after {
  border-width: 0;
}
/deep/ .van-field__control:disabled {
  color: #262626;
}
.del {
  padding: 0 px2vw(40);
  /deep/ .van-button {
    width: px2vw(670);
    height: px2vw(90);
    color: #fff;
    background:linear-gradient(270deg,rgba(107,171,255,1) 0%,rgba(108,138,249,1) 100%);
    font-size: px2vw(34);
    border-radius: px2vw(45);
    margin-top: px2vw(101);
  }
}
</style>